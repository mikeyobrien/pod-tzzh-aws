// Code generated by generate.clj DO NOT EDIT
package aws

import (
	"encoding/json"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/dynamodb"
	"github.com/aws/aws-sdk-go/service/s3"

	"github.com/tzzh/pod-tzzh-aws/babashka"
)

func ProcessMessage(message *babashka.Message) {

	if message.Op == "describe" {
		response := &babashka.DescribeResponse{
			Format: "json",
			Namespaces: []babashka.Namespace{
				{Name: "pod.tzzh.paginator",
					Vars: []babashka.Var{
						{Name: "get-paginator",
							Code: `(defn get-paginator "Returns a fn that lazily fetches the pages for a given aws fn" [page-fn] (fn get-pages [input] (lazy-seq (let [page (page-fn input)] (if-let [next-continuation-token (:NextContinuationToken page)] (cons page (get-pages (assoc input :ContinuationToken next-continuation-token))) [page])))))`},
					},
				},
				{Name: "pod.tzzh.dynamodb",
					Vars: []babashka.Var{
						{Name: "batch-get-item"},
						{Name: "batch-write-item"},
						{Name: "create-backup"},
						{Name: "create-global-table"},
						{Name: "create-table"},
						{Name: "delete-backup"},
						{Name: "delete-item"},
						{Name: "delete-table"},
						{Name: "describe-backup"},
						{Name: "describe-continuous-backups"},
						{Name: "describe-contributor-insights"},
						{Name: "describe-endpoints"},
						{Name: "describe-global-table"},
						{Name: "describe-global-table-settings"},
						{Name: "describe-limits"},
						{Name: "describe-table"},
						{Name: "describe-table-replica-auto-scaling"},
						{Name: "describe-time-to-live"},
						{Name: "get-item"},
						{Name: "list-backups"},
						{Name: "list-contributor-insights"},
						{Name: "list-global-tables"},
						{Name: "list-tables"},
						{Name: "list-tags-of-resource"},
						{Name: "put-item"},
						{Name: "query"},
						{Name: "restore-table-from-backup"},
						{Name: "restore-table-to-point-in-time"},
						{Name: "scan"},
						{Name: "tag-resource"},
						{Name: "transact-get-items"},
						{Name: "transact-write-items"},
						{Name: "untag-resource"},
						{Name: "update-continuous-backups"},
						{Name: "update-contributor-insights"},
						{Name: "update-global-table"},
						{Name: "update-global-table-settings"},
						{Name: "update-item"},
						{Name: "update-table"},
						{Name: "update-table-replica-auto-scaling"},
						{Name: "update-time-to-live"},
					},
				},
				{Name: "pod.tzzh.s3",
					Vars: []babashka.Var{
						{Name: "abort-multipart-upload"},
						{Name: "complete-multipart-upload"},
						{Name: "copy-object"},
						{Name: "create-bucket"},
						{Name: "create-multipart-upload"},
						{Name: "delete-bucket"},
						{Name: "delete-bucket-analytics-configuration"},
						{Name: "delete-bucket-cors"},
						{Name: "delete-bucket-encryption"},
						{Name: "delete-bucket-inventory-configuration"},
						{Name: "delete-bucket-lifecycle"},
						{Name: "delete-bucket-metrics-configuration"},
						{Name: "delete-bucket-policy"},
						{Name: "delete-bucket-replication"},
						{Name: "delete-bucket-tagging"},
						{Name: "delete-bucket-website"},
						{Name: "delete-object"},
						{Name: "delete-object-tagging"},
						{Name: "delete-objects"},
						{Name: "delete-public-access-block"},
						{Name: "get-bucket-accelerate-configuration"},
						{Name: "get-bucket-acl"},
						{Name: "get-bucket-analytics-configuration"},
						{Name: "get-bucket-cors"},
						{Name: "get-bucket-encryption"},
						{Name: "get-bucket-inventory-configuration"},
						{Name: "get-bucket-lifecycle"},
						{Name: "get-bucket-lifecycle-configuration"},
						{Name: "get-bucket-location"},
						{Name: "get-bucket-logging"},
						{Name: "get-bucket-metrics-configuration"},
						{Name: "get-bucket-policy"},
						{Name: "get-bucket-policy-status"},
						{Name: "get-bucket-replication"},
						{Name: "get-bucket-request-payment"},
						{Name: "get-bucket-tagging"},
						{Name: "get-bucket-versioning"},
						{Name: "get-bucket-website"},
						{Name: "get-object"},
						{Name: "get-object-acl"},
						{Name: "get-object-legal-hold"},
						{Name: "get-object-lock-configuration"},
						{Name: "get-object-retention"},
						{Name: "get-object-tagging"},
						{Name: "get-object-torrent"},
						{Name: "get-public-access-block"},
						{Name: "head-bucket"},
						{Name: "head-object"},
						{Name: "list-bucket-analytics-configurations"},
						{Name: "list-bucket-inventory-configurations"},
						{Name: "list-bucket-metrics-configurations"},
						{Name: "list-buckets"},
						{Name: "list-multipart-uploads"},
						{Name: "list-object-versions"},
						{Name: "list-objects"},
						{Name: "list-objects-v2"},
						{Name: "list-parts"},
						{Name: "put-bucket-accelerate-configuration"},
						{Name: "put-bucket-acl"},
						{Name: "put-bucket-analytics-configuration"},
						{Name: "put-bucket-cors"},
						{Name: "put-bucket-encryption"},
						{Name: "put-bucket-inventory-configuration"},
						{Name: "put-bucket-lifecycle"},
						{Name: "put-bucket-lifecycle-configuration"},
						{Name: "put-bucket-logging"},
						{Name: "put-bucket-metrics-configuration"},
						{Name: "put-bucket-notification"},
						{Name: "put-bucket-notification-configuration"},
						{Name: "put-bucket-policy"},
						{Name: "put-bucket-replication"},
						{Name: "put-bucket-request-payment"},
						{Name: "put-bucket-tagging"},
						{Name: "put-bucket-versioning"},
						{Name: "put-bucket-website"},
						{Name: "put-object"},
						{Name: "put-object-acl"},
						{Name: "put-object-legal-hold"},
						{Name: "put-object-lock-configuration"},
						{Name: "put-object-retention"},
						{Name: "put-object-tagging"},
						{Name: "put-public-access-block"},
						{Name: "restore-object"},
						{Name: "select-object-content"},
						{Name: "upload-part"},
						{Name: "upload-part-copy"},
					},
				},
			},
		}
		babashka.WriteDescribeResponse(response)

	} else if message.Op == "invoke" {

		switch message.Var {
		case "pod.tzzh.dynamodb/batch-get-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.BatchGetItemInput{}
			inputList := []dynamodb.BatchGetItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.BatchGetItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/batch-write-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.BatchWriteItemInput{}
			inputList := []dynamodb.BatchWriteItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.BatchWriteItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/create-backup":

			svc := dynamodb.New(session.New())
			input := &dynamodb.CreateBackupInput{}
			inputList := []dynamodb.CreateBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CreateBackup(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/create-global-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.CreateGlobalTableInput{}
			inputList := []dynamodb.CreateGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CreateGlobalTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/create-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.CreateTableInput{}
			inputList := []dynamodb.CreateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CreateTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/delete-backup":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DeleteBackupInput{}
			inputList := []dynamodb.DeleteBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBackup(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/delete-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DeleteItemInput{}
			inputList := []dynamodb.DeleteItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/delete-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DeleteTableInput{}
			inputList := []dynamodb.DeleteTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-backup":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeBackupInput{}
			inputList := []dynamodb.DescribeBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeBackup(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-continuous-backups":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeContinuousBackupsInput{}
			inputList := []dynamodb.DescribeContinuousBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeContinuousBackups(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-contributor-insights":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeContributorInsightsInput{}
			inputList := []dynamodb.DescribeContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeContributorInsights(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-endpoints":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeEndpointsInput{}
			inputList := []dynamodb.DescribeEndpointsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeEndpoints(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-global-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeGlobalTableInput{}
			inputList := []dynamodb.DescribeGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeGlobalTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-global-table-settings":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeGlobalTableSettingsInput{}
			inputList := []dynamodb.DescribeGlobalTableSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeGlobalTableSettings(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-limits":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeLimitsInput{}
			inputList := []dynamodb.DescribeLimitsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeLimits(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeTableInput{}
			inputList := []dynamodb.DescribeTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-table-replica-auto-scaling":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeTableReplicaAutoScalingInput{}
			inputList := []dynamodb.DescribeTableReplicaAutoScalingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeTableReplicaAutoScaling(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/describe-time-to-live":

			svc := dynamodb.New(session.New())
			input := &dynamodb.DescribeTimeToLiveInput{}
			inputList := []dynamodb.DescribeTimeToLiveInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DescribeTimeToLive(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/get-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.GetItemInput{}
			inputList := []dynamodb.GetItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/list-backups":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ListBackupsInput{}
			inputList := []dynamodb.ListBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListBackups(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/list-contributor-insights":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ListContributorInsightsInput{}
			inputList := []dynamodb.ListContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListContributorInsights(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/list-global-tables":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ListGlobalTablesInput{}
			inputList := []dynamodb.ListGlobalTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListGlobalTables(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/list-tables":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ListTablesInput{}
			inputList := []dynamodb.ListTablesInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListTables(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/list-tags-of-resource":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ListTagsOfResourceInput{}
			inputList := []dynamodb.ListTagsOfResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListTagsOfResource(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/put-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.PutItemInput{}
			inputList := []dynamodb.PutItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/query":

			svc := dynamodb.New(session.New())
			input := &dynamodb.QueryInput{}
			inputList := []dynamodb.QueryInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.Query(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/restore-table-from-backup":

			svc := dynamodb.New(session.New())
			input := &dynamodb.RestoreTableFromBackupInput{}
			inputList := []dynamodb.RestoreTableFromBackupInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.RestoreTableFromBackup(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/restore-table-to-point-in-time":

			svc := dynamodb.New(session.New())
			input := &dynamodb.RestoreTableToPointInTimeInput{}
			inputList := []dynamodb.RestoreTableToPointInTimeInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.RestoreTableToPointInTime(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/scan":

			svc := dynamodb.New(session.New())
			input := &dynamodb.ScanInput{}
			inputList := []dynamodb.ScanInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.Scan(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/tag-resource":

			svc := dynamodb.New(session.New())
			input := &dynamodb.TagResourceInput{}
			inputList := []dynamodb.TagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.TagResource(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/transact-get-items":

			svc := dynamodb.New(session.New())
			input := &dynamodb.TransactGetItemsInput{}
			inputList := []dynamodb.TransactGetItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.TransactGetItems(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/transact-write-items":

			svc := dynamodb.New(session.New())
			input := &dynamodb.TransactWriteItemsInput{}
			inputList := []dynamodb.TransactWriteItemsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.TransactWriteItems(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/untag-resource":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UntagResourceInput{}
			inputList := []dynamodb.UntagResourceInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UntagResource(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-continuous-backups":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateContinuousBackupsInput{}
			inputList := []dynamodb.UpdateContinuousBackupsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateContinuousBackups(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-contributor-insights":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateContributorInsightsInput{}
			inputList := []dynamodb.UpdateContributorInsightsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateContributorInsights(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-global-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateGlobalTableInput{}
			inputList := []dynamodb.UpdateGlobalTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateGlobalTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-global-table-settings":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateGlobalTableSettingsInput{}
			inputList := []dynamodb.UpdateGlobalTableSettingsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateGlobalTableSettings(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-item":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateItemInput{}
			inputList := []dynamodb.UpdateItemInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateItem(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-table":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateTableInput{}
			inputList := []dynamodb.UpdateTableInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateTable(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-table-replica-auto-scaling":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateTableReplicaAutoScalingInput{}
			inputList := []dynamodb.UpdateTableReplicaAutoScalingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateTableReplicaAutoScaling(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.dynamodb/update-time-to-live":

			svc := dynamodb.New(session.New())
			input := &dynamodb.UpdateTimeToLiveInput{}
			inputList := []dynamodb.UpdateTimeToLiveInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UpdateTimeToLive(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/abort-multipart-upload":

			svc := s3.New(session.New())
			input := &s3.AbortMultipartUploadInput{}
			inputList := []s3.AbortMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.AbortMultipartUpload(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/complete-multipart-upload":

			svc := s3.New(session.New())
			input := &s3.CompleteMultipartUploadInput{}
			inputList := []s3.CompleteMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CompleteMultipartUpload(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/copy-object":

			svc := s3.New(session.New())
			input := &s3.CopyObjectInput{}
			inputList := []s3.CopyObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CopyObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/create-bucket":

			svc := s3.New(session.New())
			input := &s3.CreateBucketInput{}
			inputList := []s3.CreateBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CreateBucket(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/create-multipart-upload":

			svc := s3.New(session.New())
			input := &s3.CreateMultipartUploadInput{}
			inputList := []s3.CreateMultipartUploadInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.CreateMultipartUpload(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketInput{}
			inputList := []s3.DeleteBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucket(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-analytics-configuration":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketAnalyticsConfigurationInput{}
			inputList := []s3.DeleteBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketAnalyticsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-cors":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketCorsInput{}
			inputList := []s3.DeleteBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketCors(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-encryption":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketEncryptionInput{}
			inputList := []s3.DeleteBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketEncryption(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-inventory-configuration":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketInventoryConfigurationInput{}
			inputList := []s3.DeleteBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketInventoryConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-lifecycle":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketLifecycleInput{}
			inputList := []s3.DeleteBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketLifecycle(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-metrics-configuration":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketMetricsConfigurationInput{}
			inputList := []s3.DeleteBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketMetricsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-policy":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketPolicyInput{}
			inputList := []s3.DeleteBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketPolicy(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-replication":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketReplicationInput{}
			inputList := []s3.DeleteBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketReplication(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-tagging":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketTaggingInput{}
			inputList := []s3.DeleteBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-bucket-website":

			svc := s3.New(session.New())
			input := &s3.DeleteBucketWebsiteInput{}
			inputList := []s3.DeleteBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteBucketWebsite(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-object":

			svc := s3.New(session.New())
			input := &s3.DeleteObjectInput{}
			inputList := []s3.DeleteObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-object-tagging":

			svc := s3.New(session.New())
			input := &s3.DeleteObjectTaggingInput{}
			inputList := []s3.DeleteObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteObjectTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-objects":

			svc := s3.New(session.New())
			input := &s3.DeleteObjectsInput{}
			inputList := []s3.DeleteObjectsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeleteObjects(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/delete-public-access-block":

			svc := s3.New(session.New())
			input := &s3.DeletePublicAccessBlockInput{}
			inputList := []s3.DeletePublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.DeletePublicAccessBlock(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-accelerate-configuration":

			svc := s3.New(session.New())
			input := &s3.GetBucketAccelerateConfigurationInput{}
			inputList := []s3.GetBucketAccelerateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketAccelerateConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-acl":

			svc := s3.New(session.New())
			input := &s3.GetBucketAclInput{}
			inputList := []s3.GetBucketAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketAcl(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-analytics-configuration":

			svc := s3.New(session.New())
			input := &s3.GetBucketAnalyticsConfigurationInput{}
			inputList := []s3.GetBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketAnalyticsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-cors":

			svc := s3.New(session.New())
			input := &s3.GetBucketCorsInput{}
			inputList := []s3.GetBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketCors(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-encryption":

			svc := s3.New(session.New())
			input := &s3.GetBucketEncryptionInput{}
			inputList := []s3.GetBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketEncryption(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-inventory-configuration":

			svc := s3.New(session.New())
			input := &s3.GetBucketInventoryConfigurationInput{}
			inputList := []s3.GetBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketInventoryConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-lifecycle":

			svc := s3.New(session.New())
			input := &s3.GetBucketLifecycleInput{}
			inputList := []s3.GetBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketLifecycle(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-lifecycle-configuration":

			svc := s3.New(session.New())
			input := &s3.GetBucketLifecycleConfigurationInput{}
			inputList := []s3.GetBucketLifecycleConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketLifecycleConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-location":

			svc := s3.New(session.New())
			input := &s3.GetBucketLocationInput{}
			inputList := []s3.GetBucketLocationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketLocation(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-logging":

			svc := s3.New(session.New())
			input := &s3.GetBucketLoggingInput{}
			inputList := []s3.GetBucketLoggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketLogging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-metrics-configuration":

			svc := s3.New(session.New())
			input := &s3.GetBucketMetricsConfigurationInput{}
			inputList := []s3.GetBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketMetricsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-policy":

			svc := s3.New(session.New())
			input := &s3.GetBucketPolicyInput{}
			inputList := []s3.GetBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketPolicy(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-policy-status":

			svc := s3.New(session.New())
			input := &s3.GetBucketPolicyStatusInput{}
			inputList := []s3.GetBucketPolicyStatusInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketPolicyStatus(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-replication":

			svc := s3.New(session.New())
			input := &s3.GetBucketReplicationInput{}
			inputList := []s3.GetBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketReplication(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-request-payment":

			svc := s3.New(session.New())
			input := &s3.GetBucketRequestPaymentInput{}
			inputList := []s3.GetBucketRequestPaymentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketRequestPayment(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-tagging":

			svc := s3.New(session.New())
			input := &s3.GetBucketTaggingInput{}
			inputList := []s3.GetBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-versioning":

			svc := s3.New(session.New())
			input := &s3.GetBucketVersioningInput{}
			inputList := []s3.GetBucketVersioningInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketVersioning(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-bucket-website":

			svc := s3.New(session.New())
			input := &s3.GetBucketWebsiteInput{}
			inputList := []s3.GetBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetBucketWebsite(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object":

			svc := s3.New(session.New())
			input := &s3.GetObjectInput{}
			inputList := []s3.GetObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-acl":

			svc := s3.New(session.New())
			input := &s3.GetObjectAclInput{}
			inputList := []s3.GetObjectAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectAcl(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-legal-hold":

			svc := s3.New(session.New())
			input := &s3.GetObjectLegalHoldInput{}
			inputList := []s3.GetObjectLegalHoldInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectLegalHold(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-lock-configuration":

			svc := s3.New(session.New())
			input := &s3.GetObjectLockConfigurationInput{}
			inputList := []s3.GetObjectLockConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectLockConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-retention":

			svc := s3.New(session.New())
			input := &s3.GetObjectRetentionInput{}
			inputList := []s3.GetObjectRetentionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectRetention(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-tagging":

			svc := s3.New(session.New())
			input := &s3.GetObjectTaggingInput{}
			inputList := []s3.GetObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-object-torrent":

			svc := s3.New(session.New())
			input := &s3.GetObjectTorrentInput{}
			inputList := []s3.GetObjectTorrentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetObjectTorrent(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/get-public-access-block":

			svc := s3.New(session.New())
			input := &s3.GetPublicAccessBlockInput{}
			inputList := []s3.GetPublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.GetPublicAccessBlock(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/head-bucket":

			svc := s3.New(session.New())
			input := &s3.HeadBucketInput{}
			inputList := []s3.HeadBucketInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.HeadBucket(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/head-object":

			svc := s3.New(session.New())
			input := &s3.HeadObjectInput{}
			inputList := []s3.HeadObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.HeadObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-bucket-analytics-configurations":

			svc := s3.New(session.New())
			input := &s3.ListBucketAnalyticsConfigurationsInput{}
			inputList := []s3.ListBucketAnalyticsConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListBucketAnalyticsConfigurations(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-bucket-inventory-configurations":

			svc := s3.New(session.New())
			input := &s3.ListBucketInventoryConfigurationsInput{}
			inputList := []s3.ListBucketInventoryConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListBucketInventoryConfigurations(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-bucket-metrics-configurations":

			svc := s3.New(session.New())
			input := &s3.ListBucketMetricsConfigurationsInput{}
			inputList := []s3.ListBucketMetricsConfigurationsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListBucketMetricsConfigurations(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-buckets":

			svc := s3.New(session.New())
			input := &s3.ListBucketsInput{}
			inputList := []s3.ListBucketsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListBuckets(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-multipart-uploads":

			svc := s3.New(session.New())
			input := &s3.ListMultipartUploadsInput{}
			inputList := []s3.ListMultipartUploadsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListMultipartUploads(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-object-versions":

			svc := s3.New(session.New())
			input := &s3.ListObjectVersionsInput{}
			inputList := []s3.ListObjectVersionsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListObjectVersions(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-objects":

			svc := s3.New(session.New())
			input := &s3.ListObjectsInput{}
			inputList := []s3.ListObjectsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListObjects(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-objects-v2":

			svc := s3.New(session.New())
			input := &s3.ListObjectsV2Input{}
			inputList := []s3.ListObjectsV2Input{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListObjectsV2(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/list-parts":

			svc := s3.New(session.New())
			input := &s3.ListPartsInput{}
			inputList := []s3.ListPartsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.ListParts(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-accelerate-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketAccelerateConfigurationInput{}
			inputList := []s3.PutBucketAccelerateConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketAccelerateConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-acl":

			svc := s3.New(session.New())
			input := &s3.PutBucketAclInput{}
			inputList := []s3.PutBucketAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketAcl(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-analytics-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketAnalyticsConfigurationInput{}
			inputList := []s3.PutBucketAnalyticsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketAnalyticsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-cors":

			svc := s3.New(session.New())
			input := &s3.PutBucketCorsInput{}
			inputList := []s3.PutBucketCorsInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketCors(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-encryption":

			svc := s3.New(session.New())
			input := &s3.PutBucketEncryptionInput{}
			inputList := []s3.PutBucketEncryptionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketEncryption(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-inventory-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketInventoryConfigurationInput{}
			inputList := []s3.PutBucketInventoryConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketInventoryConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-lifecycle":

			svc := s3.New(session.New())
			input := &s3.PutBucketLifecycleInput{}
			inputList := []s3.PutBucketLifecycleInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketLifecycle(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-lifecycle-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketLifecycleConfigurationInput{}
			inputList := []s3.PutBucketLifecycleConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketLifecycleConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-logging":

			svc := s3.New(session.New())
			input := &s3.PutBucketLoggingInput{}
			inputList := []s3.PutBucketLoggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketLogging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-metrics-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketMetricsConfigurationInput{}
			inputList := []s3.PutBucketMetricsConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketMetricsConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-notification":

			svc := s3.New(session.New())
			input := &s3.PutBucketNotificationInput{}
			inputList := []s3.PutBucketNotificationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketNotification(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-notification-configuration":

			svc := s3.New(session.New())
			input := &s3.PutBucketNotificationConfigurationInput{}
			inputList := []s3.PutBucketNotificationConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketNotificationConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-policy":

			svc := s3.New(session.New())
			input := &s3.PutBucketPolicyInput{}
			inputList := []s3.PutBucketPolicyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketPolicy(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-replication":

			svc := s3.New(session.New())
			input := &s3.PutBucketReplicationInput{}
			inputList := []s3.PutBucketReplicationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketReplication(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-request-payment":

			svc := s3.New(session.New())
			input := &s3.PutBucketRequestPaymentInput{}
			inputList := []s3.PutBucketRequestPaymentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketRequestPayment(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-tagging":

			svc := s3.New(session.New())
			input := &s3.PutBucketTaggingInput{}
			inputList := []s3.PutBucketTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-versioning":

			svc := s3.New(session.New())
			input := &s3.PutBucketVersioningInput{}
			inputList := []s3.PutBucketVersioningInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketVersioning(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-bucket-website":

			svc := s3.New(session.New())
			input := &s3.PutBucketWebsiteInput{}
			inputList := []s3.PutBucketWebsiteInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutBucketWebsite(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object":

			svc := s3.New(session.New())
			input := &s3.PutObjectInput{}
			inputList := []s3.PutObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object-acl":

			svc := s3.New(session.New())
			input := &s3.PutObjectAclInput{}
			inputList := []s3.PutObjectAclInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObjectAcl(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object-legal-hold":

			svc := s3.New(session.New())
			input := &s3.PutObjectLegalHoldInput{}
			inputList := []s3.PutObjectLegalHoldInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObjectLegalHold(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object-lock-configuration":

			svc := s3.New(session.New())
			input := &s3.PutObjectLockConfigurationInput{}
			inputList := []s3.PutObjectLockConfigurationInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObjectLockConfiguration(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object-retention":

			svc := s3.New(session.New())
			input := &s3.PutObjectRetentionInput{}
			inputList := []s3.PutObjectRetentionInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObjectRetention(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-object-tagging":

			svc := s3.New(session.New())
			input := &s3.PutObjectTaggingInput{}
			inputList := []s3.PutObjectTaggingInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutObjectTagging(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/put-public-access-block":

			svc := s3.New(session.New())
			input := &s3.PutPublicAccessBlockInput{}
			inputList := []s3.PutPublicAccessBlockInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.PutPublicAccessBlock(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/restore-object":

			svc := s3.New(session.New())
			input := &s3.RestoreObjectInput{}
			inputList := []s3.RestoreObjectInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.RestoreObject(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/select-object-content":

			svc := s3.New(session.New())
			input := &s3.SelectObjectContentInput{}
			inputList := []s3.SelectObjectContentInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.SelectObjectContent(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/upload-part":

			svc := s3.New(session.New())
			input := &s3.UploadPartInput{}
			inputList := []s3.UploadPartInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UploadPart(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}
		case "pod.tzzh.s3/upload-part-copy":

			svc := s3.New(session.New())
			input := &s3.UploadPartCopyInput{}
			inputList := []s3.UploadPartCopyInput{}
			err := json.Unmarshal([]byte(message.Args), &inputList)
			if err != nil {
				babashka.WriteErrorResponse(message, err)
			} else {
				if len(inputList) > 0 {
					input = &inputList[0]
				}
				res, err := svc.UploadPartCopy(input)
				if err != nil {
					babashka.WriteErrorResponse(message, err)
				} else {
					babashka.WriteInvokeResponse(message, res)
				}
			}

		}
	}
}
